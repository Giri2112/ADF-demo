{
	"name": "movieflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Movie01",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Delimitedmovieout",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregateMovie"
				},
				{
					"name": "joinMovie"
				},
				{
					"name": "selectmovie"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MovieId as string,",
				"          Title as string,",
				"          Genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(MovieTitle = toString(left(Title, length(Title)-6)),",
				"          Year = toInteger(trim(right(Title, 6), '()'))) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(Year),",
				"     Movierelaesedinperticularyear = count()) ~> aggregateMovie",
				"aggregateMovie, derivedColumn1 join(aggregateMovie@Year == derivedColumn1@Year,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMovie",
				"joinMovie select(mapColumn(",
				"          MovieId,",
				"          MovieTitle,",
				"          Year = aggregateMovie@Year,",
				"          Genres,",
				"          Movierelaesedinperticularyear,",
				"          Year = derivedColumn1@Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectmovie",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Movies.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}