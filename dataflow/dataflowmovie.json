{
	"name": "dataflowmovie",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText25",
						"type": "DatasetReference"
					},
					"name": "sourcemovie"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText26",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Delimitedmovieout",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnmovie"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MovieId as string,",
				"          Title as string,",
				"          Genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcemovie",
				"sourcemovie derive(Movietitle = toString(left(Title, length(Title)-6)),",
				"          Year = toInteger(trim(right(Title, 6), '()'))) ~> derivedColumnmovie",
				"derivedColumnmovie aggregate(groupBy(Year),",
				"     {Movie release count wrt year} = count()) ~> aggregate1",
				"aggregate1, derivedColumnmovie join(aggregate1@Year == derivedColumnmovie@Year,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          MovieId,",
				"          Movietitle,",
				"          Genres,",
				"          Year = aggregate1@Year,",
				"          Totalmoviecountbynyear = {Movie release count wrt year},",
				"          Year = derivedColumnmovie@Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumnmovie sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Cleaned-movie.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Moviewithaggregation.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}